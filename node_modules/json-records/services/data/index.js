// Import.
const fs = require('fs');
const jcopy = require('jcopy');
const Record = require('./record');

// Constants.
const FILE_ENCODING = 'utf8';
const EMPTY_RECORDS = [];
const EMPTY_DATA_STRUCTURE = {
  records: []
};
const ERROR_INCORRECT_FILTER_TYPE = 'Filter should be a function.';

/**
 * Data.
 */
class Data {
  /**
   * Data constructor.
   * @param {string} filePath - File path.
   */
  constructor(filePath) {
    this.filePath = filePath;
    this.fileRecords = [];
    this._createFileIfNotExist();
    this._loadFileRecords();
  }

  /**
   * Get data.
   * @param {function} [filter] - Filter function.
   * @return {Array}
   */
  get(filter) {
    this._throwErrorIfIncorrectFilter(filter);
    const normalizedFilter = this._normalizeFilter(filter);
    const allData = this._getAllData();
    const data = allData.filter(normalizedFilter);
    return data;
  }

  /**
   * Add data.
   * @param {object} data - Data.
   */
  add(data) {
    const record = new Record(data);
    this.fileRecords.push(record);
    this._saveFileRecords();
  }

  /**
   * Update data.
   * @param {function} filter - Filter function.
   * @param {object} data - Data.
   */
  update(filter, data) {
    this._throwErrorIfIncorrectFilter(filter);
    const normalizedFilter = this._normalizeFilter(filter);
    const allData = this._getAllData();
    for (let i = 0; i < allData.length; i++) {
      if (normalizedFilter(allData[i])) {
        this.fileRecords[i] = new Record(data);
      }
    }
    this._saveFileRecords();
  }

  /**
   * Remove data.
   * @param {function} filter - Filter function.
   */
  remove(filter) {
    this._throwErrorIfIncorrectFilter(filter);
    const normalizedFilter = this._normalizeFilter(filter);
    this.fileRecords = this.fileRecords.filter(v => !normalizedFilter(v.data));
    this._saveFileRecords();
  }

  /**
   * Get all data.
   * @private
   * @return {Array}
   */
  _getAllData() {
    const records = jcopy(this.fileRecords);
    const allData = records.map(v => v.data);
    return allData;
  }

  /**
   * Throw error if incorrect filter.
   * @param {function} [filter] - Filter function.
   */
  _throwErrorIfIncorrectFilter(filter) {
    const isCorrectFilter = this._isCorrectFilter(filter);
    if (!isCorrectFilter) {
      throw new TypeError(ERROR_INCORRECT_FILTER_TYPE);
    }
  }

  /**
   * Is correct filter.
   * @private
   * @param {function} [filter] - Filter function.
   * @return {boolean}
   */
  _isCorrectFilter(filter) {
    if (typeof filter !== 'function' && typeof filter !== 'undefined') {
      return false;
    }
    return true;
  }

  /**
   * Normalize filter.
   * @param {function} [filter] - Filter function.
   * @return {function}
   */
  _normalizeFilter(filter) {
    const normalizedFilter = typeof filter === 'undefined' ? (() => {
      return true;
    }) : filter;
    return normalizedFilter;
  }

  /**
   * Save file records.
   * @private
   */
  _saveFileRecords() {
    const fileContent = this._createFileContent();
    fs.writeFileSync(this.filePath, fileContent, { encoding: FILE_ENCODING });
  }

  /**
   * Load file records.
   * @private
   */
  _loadFileRecords() {
    this.fileRecords = this._getFileRecords();
  }

  /**
   * Create file records.
   * @param {Array} recordsData - Records data.
   */
  _createFileRecords(recordsData) {
    const records = recordsData.map(v => new Record(v));
    return records;
  }

  /**
   * Get file records.
   * @private
   * @return {Array}
   */
  _getFileRecords() {
    const emptyRecords = this._getEmptyRecords();
    const fileContentObject = this._getFileContentObject();
    const fileRecords = fileContentObject.records || emptyRecords;
    return fileRecords;
  }

  /**
   * Create file content object.
   * @private
   * @return {object}
   */
  _createFileContentObject() {
    const fileContentObject = this._getEmptyDataStructure();
    fileContentObject.records = this.fileRecords;
    return fileContentObject;
  }

  /**
   * Get file content object.
   * @private
   * @return {object}
   */
  _getFileContentObject() {
    const fileContent = this._getFileContent();
    const fileContentObject = JSON.parse(fileContent);
    return fileContentObject;
  }

  /**
   * Create file content.
   * @private
   * @return {string}
   */
  _createFileContent() {
    const dataStructure = this._getEmptyDataStructure();
    dataStructure.records = this.fileRecords;
    const fileContent = JSON.stringify(dataStructure);
    return fileContent;
  }

  /**
   * Get file content.
   * @private
   * @return {string}
   */
  _getFileContent() {
    const fileContent = fs.readFileSync(this.filePath, { encoding: FILE_ENCODING });
    return fileContent;
  }

  /**
   * Create file if not exist.
   * @private
   */
  _createFileIfNotExist() {
    if (!fs.existsSync(this.filePath)) {
      this._dropFileRecords();
    }
  }

  /**
   * Drop file records.
   * @private
   */
  _dropFileRecords() {
    const emptyDataStructure = this._getEmptyDataStructure();
    fs.writeFileSync(this.filePath, JSON.stringify(emptyDataStructure), { encoding: FILE_ENCODING });
  }

  /**
   * Get empty data structure.
   * @private
   * @return {object}
   */
  _getEmptyDataStructure() {
    const emptyDataStructure = jcopy(EMPTY_DATA_STRUCTURE);
    return emptyDataStructure;
  }

  /**
   * Get empty records.
   * @private
   * @return {Array}
   */
  _getEmptyRecords() {
    const emptyRecords = jcopy(EMPTY_RECORDS);
    return emptyRecords;
  }
}

// Export.
module.exports = Data;
