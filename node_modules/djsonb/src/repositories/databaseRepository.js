const { readFile, writeFile } = require('fs/promises')

class DatabaseRepository {
	constructor({ file }) {
		this.file = file
	}

	async _currentFileContent() {
		try {
			return JSON.parse(await readFile(this.file))
		} catch (err) {
			await writeFile(this.file, JSON.stringify([]))
		}
	}

	async findById(itemId) {
		const all = await this._currentFileContent()
		if(!itemId) return all
		
		return all.find(({ _id }) => itemId === _id)
	}

	async create(data) {
		const currentFile = await this._currentFileContent()

		data._id = Math.floor(Math.random() * 100) + Date.now()

		currentFile.push(data)

		await writeFile(this.file, JSON.stringify(currentFile))

		return data._id
	}

	async delete(itemId) {
		 const currentFile = await this._currentFileContent()
		 for (let [i, user] of currentFile.entries()) {
        	if (user._id == itemId) {
        		currentFile.splice(i, 1);
				await writeFile(this.file, JSON.stringify(currentFile))
				return user;
    		}
 		}
	}

	async update(data) {
		const currentFile = await this._currentFileContent()
		const userData = await this.findById(data._id) 

		for (let [i, user] of currentFile.entries()) {
        	if (user._id == userData._id) {
        		currentFile.splice(i, 1);
				await writeFile(this.file, JSON.stringify([...currentFile, data]))
				return user
    		}
    	}
	}

	async reset() {
		if(!!await readFile(this.file))
			await writeFile(this.file, JSON.stringify([]))
	}
}

module.exports = DatabaseRepository