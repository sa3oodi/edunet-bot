// Constants.
const ERROR_WRONG_TYPE = 'Data to copy is not an object.';

/**
 * JCopy.
 * @param {object} data - Object to copy.
 * @param {object} [options] - Options.
 * @param {boolean} [options.errorIfNotAnObject] - Throw error if not an object.
 * @param {boolean} [options.errorIfCanNotCopy] - Throw error if can not copy.
 * @return {object}
 */
function jcopy(data, options) {
  // Check if not an object.
  if (typeof data !== 'object') {
    return copyNotAnObject(data, options);
  }

  // Copy object.
  return copyObject(data, options);
}

/**
 * Copy not an object.
 * @param {any} data - Data to copy.
 * @param {object} [options] - Options.
 * @param {boolean} [options.errorIfNotAnObject] - Throw error if not an object.
 * @return {any}
 */
function copyNotAnObject(data, options) {
  // Throw error accordance to options.
  if (options && options.errorIfNotAnObject) {
    throw new TypeError(ERROR_WRONG_TYPE);
  }

  // Return as is.
  return data;
}

/**
 * Copy object.
 * @param {object} data - Data to copy.
 * @param {object} [options] - Options.
 * @param {boolean} [options.errorIfCanNotCopy] - Throw error if can not copy.
 * @return {object}
 */
function copyObject(data, options) {
  try {
    // Try to copy.
    const objectCopy = JSON.parse(JSON.stringify(data));
    return objectCopy;
  } catch (err) {
    // Throw error accordance to options.
    if (options && options.errorIfCanNotCopy) {
      throw err;
    }

    // Return UNDEFINED.
    return;
  }
}

// Export.
module.exports = jcopy;
